service: gel-redirector
frameworkVersion: '3'

plugins:
  - serverless-python-requirements
  - serverless-plugin-resource-tagging
  - serverless-deployment-bucket

custom:
  pythonRequirements:
    layer: true

provider:
  name: aws
  endpointType: REGIONAL
  region: us-west-2
  runtime: python3.9
  #architecture: arm64
  stackTags:
    Cluster: experiment
    CostCenter: Cluster
    Owner: TSV
    InfraRole: "API Gateway"
    Name: gel
    Product: computecentral
  ecr:
    images:
      com_gel_funcs:
        path: ./

  environment:
    DYNAMODB_TABLE: gel-${sls:stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

  deploymentPrefix: serverless
  deploymentBucket:
    name: com.serverless.${sls:stage}-${self:service}.${self:provider.region}.deploys
    serverSideEncryption: AES256
    blockPublicAccess: true
    skipPolicySetup: true
    versioning: true
    tags:
      Cluster: experiment
      CostCenter: Cluster
      Owner: TSV
      InfraRole: "API Gateway"
      Product: computecentral


functions:

  gelAuthorizerFunc:
    image:
      name: com_gel_funcs
      command:
        - authorizerFunc.handler

  redirectorFunc:
    image:
      name: com_gel_funcs
      command:
        - redirectorFunc.handler
    events:
      - http:
          path: /
          method: any
          cors: true
          authorizer:
            name: gelAuthorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: /{proxy+}
          method: any
          cors: true
          authorizer:
            name: gelAuthorizerFunc
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

resources:
  Resources:
    GelDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customer_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: customer_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
